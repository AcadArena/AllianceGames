rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    function optional(field, data) {
      return !(field in data.keys()) || data[field] == null
    }

    function userDoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data
    }

    function userType() {
      return userDoc().data.type
    }

    function isAdmin() {
      return (
        !optional("admin", auth().token)
        || !optional("super_admin", auth().token)
        || userDoc().data.type == "admin"
      )
    }

    function auth() {
      return request.auth
    }

    function uid() {
      return request.auth.uid
    }

    function requestData() {
      return request.resource.data
    }

    function resourceData() {
      return resource.data
    }

    function fields(requiredFields, optionalFields) {
      let allFields = requiredFields.concat(optionalFields);
      return requestData().keys().hasAll(requiredFields) &&
        requestData().keys().hasOnly(allFields)
    }

    function editFields(allowedFields) {
      let affectedKeys = requestData().diff(resource.data).affectedKeys();
      return affectedKeys.hasOnly(allowedFields)
    }

    function isUser(user, userId) {
      return (
        user.uid == userId
        && user.uid == uid()
        && user.email == request.auth.token.email
        && user.username is string
        && user.username.size() > 0
        && user._username == user.username.lower()
        && user.socialHandle is string
        && user.avatar is string
        && user.type in ["admin", "talent", "default"]
      )
    }

    function isRoomAdmin(roomId) {
      let ROOM = getAfter(/databases/$(database)/documents/rooms/$(roomId)).data;
      return ((uid() == ROOM.owner|| uid() in ROOM.admins))
    }


    match /users/{userId} {
      allow create: if
        uid() == userId
        && isUser(requestData(), userId)
        && fields(["uid", "email", "username", "_username", "socialHandle", "avatar", "type"],[])
        && requestData().type in ["talent", "default"]

      allow update: if
        uid() == userId
        && isUser(requestData(), userId)
        && editFields(["email", "username", "_username", "socialHandle", "avatar", "type"])
        && (requestData().type in ["talent", "default"]
        || requestData().type == resource.data.type)

      allow get;
      allow list: if request.query.limit <= 50
    }


    match /veto_presets/{presetId} {
      allow read;
      allow delete: if isAdmin() || resource.data.id == uid();
    }

    // Rundown
    match /rundowns/{rundownId} {
      function isValidRundownCallout(callout) {
        return (
          callout.text is string
          && callout.icon is string
          && callout.live is bool
          && callout.textColor is string
          && callout.backgroundColor is string
        )
      }

      function isValidRundownSetting(rundown) {
        return (
          rundown.id == rundownId
          && rundown.roomId is string
          && rundown.roomId.size() > 0
          && exists(/databases/$(database)/documents/rooms/$(rundown.roomId))
          && rundown.name is string
          && rundown.name.size() > 0
          && rundown.desc is string
          && rundown.image is string
          && rundown.currentItem is string
          && rundown.columnOrder is list
          && rundown.columns is map
          && rundown.columns.keys().hasAll(rundown.columnOrder)
          && rundown.columns.keys().hasOnly(rundown.columnOrder)
          && rundown.columnOrder.hasAll(rundown.columns.keys())
          && rundown.columnOrder.hasOnly(rundown.columns.keys())
          && rundown.flow is list
          && isValidRundownCallout(rundown.callout)
        )
      }

      allow read;
      allow create: if isRoomAdmin(requestData().roomId) && isValidRundownSetting(requestData())
        && fields(["id", "roomId", "name", "desc", "image", "currentItem", "columnOrder", "columns", "flow"], ["callout"])
      allow update: if isRoomAdmin(resourceData().roomId) && isValidRundownSetting(requestData())
        && editFields(["name", "desc", "image", "currentItem", "columnOrder", "columns", "flow", "callout"])
      allow delete: if isRoomAdmin(resourceData().roomId)
    }



    match /rooms/{roomId} {
      function isRoom(room, roomId) {
        return (
          room.id == roomId
          && room.name is string
          && room.name.size() > 1
          && room.avatar is string
          && room.owner is string
          // && room.owner == uid()
          && exists(/databases/$(database)/documents/users/$(room.owner))
          && room.admins is list

          && (optional("uniqueCode", room.uniqueCode)
          || room.uniqueCode is string)
        )
      }

      allow create: if isRoom(requestData(), roomId)
        && requestData().owner == uid()
        && fields(["id", "owner", "admins", "name", "avatar"], ["uniqueCode"])
        && request.resource.data.owner == uid()

      allow update: if isRoom(requestData(), roomId)
        && (resource.data.owner == uid() && editFields(["owner", "admins", "name", "avatar", "uniqueCode"])
          || (uid() in resource.data.admins && editFields(["admins", "name", "avatar", "uniqueCode"])))

      allow delete: if uid() in resource.data.owner

      allow read;


      // Broadcast Data

      match /live/{docId} {
        allow read;
        allow create, update: if isRoomAdmin(roomId)
      }


      // Access Requests
      match /requestAccess/{userId} {
        function isRoomRequest(req) {
          let user = userDoc();
          return (
            userId == uid()
            && req.uid == uid()
            && req.email == user.email
            && req.username == user.username
            && req._username == user._username
            && req.socialHandle == user.socialHandle
            && req.avatar == user.avatar
            && req.type == user.type
            && req.roomId == roomId
            && req.roomName is string
          )
        }

        allow create: if isRoomRequest(requestData())
      }

      // Chatrooms
      match /chat {
        function isChat(chat) {
          return (
            isUser(chat.author, uid())
            && chat.author.uid == uid()
            && chat.roomId == roomId
            && chat.room in ["everyone", "talent", "admin"]
            && chat.message is string
            && chat.message.size() <= 2000
          )
        }

        match /everyone {
          allow list: if request.query.limit <= 100
          allow write: if isChat(requestData())
        }

        match /talents {
          allow list: if request.query.limit <= 100
            && (isAdmin() || userType() == "talent")
          allow write: if isChat(requestData())
        }

      }
    }
  }
}